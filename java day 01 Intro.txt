 Day 1:
-------------------------------------------------
 Java Syllabus
1. Java Introduction
2. Datatypes
3. Access Modifiers
4. Operators
5. OOPS concepts
  i) Class & Objects
  ii) Data Abstraction
  iii) Data Encapsulation
  iv) Polymorsphism
  v) Inheritance
6) Exception Handling
7) Packages
8) Applets
9) Files 
10) Multi-Threading

-------------------------------------------------------------------------------------------------------------

1. Java Introduction

Java is high level language, developed by James Gosling in 1995 by SUN microsystems.

Uses of Java:
1. Pure Object Oreinted
2. Platform Indepent
3. Simple Design
4. Secured Language
5. Portable
6. Arcitectural Neutral
7. Multi-Thread
8. Interpreted Language
9. High Performance
10. Dynamic Language

------------------------------------------------------------------------------------------------
The following are the basic concepts of OOPS
1. Object
2. Class
3. Data abstraction
4. Encapsulation
5. Inheritance
6. Polymorphism

------------------------------------------------
  
Classes & Objects:
Object : Object have states & behaviour
ex: A dog has states like color, name, breed.

*Note: Object is an Instance of a Class.

Class : A Class is blueprint template that describes states and behavours of object.

Ex: Dog.

Methods: A method is basically a behaviour.
Methods have logic.

Instance Variable: Each objects has its unquie set of instance variables. An object state is created by the value assigned to these instance variables.

ex:1
public class Hello
{
	public static void main(String args[]) 
	{
	System.out.println("Hello WORLD");
	}
}


* public is an access specifier, which defines who can access this method. Public means 
that this method will be accessible by any class.
* static is a keyword which identifies the class related thing. This means the given method 
or variable is not instance related but class related. It can be accessed without creating 
the instance of a class.
* void is used to define the Return Type of the method. It defines what the method can 
return. Void means the method will not return any value.
* main is the name of the method. This method name is searched by JVM as a starting point for a program.



To save: we save this text file to Classname.java 
To Open CMD prompt: navigate to address bar and type : "cmd".
To compile : type :> javac filename.java  (enter)
To Excute: type:> java filename (enter)

-------------------------------------------------------------------------------------------------------
Java Virtual Machine (JVM) is the most important part of java technology. 
 JVM and Java API together, form a platform for all java programs to run.
 JVM and Java API is known as Java Runtime Environment (JRE).
 Java provides both compiler and a software machine called Java Virtual Machine  (JVM) for each computer machine.
 The java compiler translates java source code into an intermediate code known as byte code which executes on a special type of machine. This machine is called Java Virtual Machine and exists only inside the computer memory.

Source code ---> Java compiler ---> Byte code

 Java interpreter reads byte code and translates into a language that the computer can understand and it can execute the code in any system.

Byte code --> Java interpreter ---> Machine language


Machine language --> Java interpreter ---> Output

 JVM loads the java classes, verifies the byte code, interprets and executes it. 
Additionally, it provide functions like security management and garbage collection.



-----------------------------------------------------------------
Java program structure:
Syntax: 
Documentation section
Package statement
Import statement  
Interface statement
Class definitions
Main method class definition
 {
main( ) method definition
 }


-----------------------------------------------------------------
Keywords:
abstract
assert
byte
boolean
break
class
case
catch
char
const
continue
default
double
do
extends
else
enum
final
finally
float
for
goto
if
implement
instanceof
int
interface
import
long
private
public
protected
package
native
new
strictfp
super
short
static
switch
synchornised
this
throw
throws
transient
try
void
volatile
while
return

-----------------------------------------------------------------

Variables & datatypes:

Variables:
Reserved memory locations that  use to store values.

syntax:
 	variable_name = value;
ex:		  a   = 10;


Datatypes: It is use to tell the compiler, the type of input given by the user.

syntax:
 	datatype variable_name = value;
ex:		 
	int a   = 10;

2 types:
1) Primitive datatypes
2) Reference datatypes

1) Primitive datatypes
a) Byte - byte 
b) Integer - int
c) Character - char
d) Floating point - float
e) Double floating point - double
f) Boolean  - boolean

a) Byte -  2's compliment 8 bit integer
b) Integer -  access all whole numbers
c) Character -  access alphabets & symbols
d) Floating point -  access decimal point values
e) Double floating point - double - access more range decimal point values (more range)
f) Boolean  - boolean - it tells either true or false


2) Reference datatypes:
These are user defined datatypes like : constructors of the classes. These are use to access objects.
